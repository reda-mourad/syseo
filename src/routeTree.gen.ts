/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PrintImport } from './routes/print'
import { Route as MainImport } from './routes/_main'
import { Route as AuthImport } from './routes/_auth'
import { Route as MainIndexImport } from './routes/_main/index'
import { Route as MainIdImport } from './routes/_main/$id'
import { Route as AuthSignInImport } from './routes/_auth/sign-in'

// Create/Update Routes

const PrintRoute = PrintImport.update({
  id: '/print',
  path: '/print',
  getParentRoute: () => rootRoute,
} as any)

const MainRoute = MainImport.update({
  id: '/_main',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const MainIndexRoute = MainIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRoute,
} as any)

const MainIdRoute = MainIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => MainRoute,
} as any)

const AuthSignInRoute = AuthSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/print': {
      id: '/print'
      path: '/print'
      fullPath: '/print'
      preLoaderRoute: typeof PrintImport
      parentRoute: typeof rootRoute
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInImport
      parentRoute: typeof AuthImport
    }
    '/_main/$id': {
      id: '/_main/$id'
      path: '/$id'
      fullPath: '/$id'
      preLoaderRoute: typeof MainIdImport
      parentRoute: typeof MainImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexImport
      parentRoute: typeof MainImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface MainRouteChildren {
  MainIdRoute: typeof MainIdRoute
  MainIndexRoute: typeof MainIndexRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainIdRoute: MainIdRoute,
  MainIndexRoute: MainIndexRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof MainRouteWithChildren
  '/print': typeof PrintRoute
  '/sign-in': typeof AuthSignInRoute
  '/$id': typeof MainIdRoute
  '/': typeof MainIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteWithChildren
  '/print': typeof PrintRoute
  '/sign-in': typeof AuthSignInRoute
  '/$id': typeof MainIdRoute
  '/': typeof MainIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_main': typeof MainRouteWithChildren
  '/print': typeof PrintRoute
  '/_auth/sign-in': typeof AuthSignInRoute
  '/_main/$id': typeof MainIdRoute
  '/_main/': typeof MainIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/print' | '/sign-in' | '/$id' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/print' | '/sign-in' | '/$id' | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/_main'
    | '/print'
    | '/_auth/sign-in'
    | '/_main/$id'
    | '/_main/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  MainRoute: typeof MainRouteWithChildren
  PrintRoute: typeof PrintRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  MainRoute: MainRouteWithChildren,
  PrintRoute: PrintRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_main",
        "/print"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/sign-in"
      ]
    },
    "/_main": {
      "filePath": "_main.tsx",
      "children": [
        "/_main/$id",
        "/_main/"
      ]
    },
    "/print": {
      "filePath": "print.tsx"
    },
    "/_auth/sign-in": {
      "filePath": "_auth/sign-in.tsx",
      "parent": "/_auth"
    },
    "/_main/$id": {
      "filePath": "_main/$id.tsx",
      "parent": "/_main"
    },
    "/_main/": {
      "filePath": "_main/index.tsx",
      "parent": "/_main"
    }
  }
}
ROUTE_MANIFEST_END */
